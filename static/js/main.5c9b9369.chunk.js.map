{"version":3,"sources":["components/Navbar/index.js","components/Jumbotron/index.js","components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","this","props","score","Component","Jumbotron","Cards","onClick","imageClick","alt","image","replace","src","App","state","scape","clickedScape","event","currentScape","target","_this","indexOf","setState","sort","b","Math","random","alert","concat","_this2","components_Navbar","components_Jumbotron","map","components_Cards","id","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yw2BAkBeA,0LAZX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACZH,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,oBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,UAAkCC,KAAKC,MAAMC,gBAPlCC,oBCSJC,MATV,WACH,OACIR,EAAAC,EAAAC,cAAA,UAAQC,UAAY,UAC1BH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,6ICQaO,MAZR,SAAeJ,GACpB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOO,QAASL,EAAMM,YACnCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OACEU,IAAKP,EAAMQ,MAAMC,QAAQ,OAAQ,IACjCC,IAAKV,EAAMQ,kBC4ENG,oNA3EbC,MAAQ,CACNC,QACAC,aAAc,GACdb,MAAO,KAITK,WAAa,SAAAS,GACX,IAAMC,EAAeD,EAAME,OAAOV,IAEhCW,EAAKN,MAAME,aAAaK,QAAQH,IAAiB,GAIjDE,EAAKE,SAAS,CACZP,MAAOK,EAAKN,MAAMC,MAAMQ,KAAK,SAASzB,EAAG0B,GACvC,MAAO,GAAMC,KAAKC,WAEpBV,aAAc,GACdb,MAAO,IAEPwB,MAAM,0BAIRP,EAAKE,SACH,CACEP,MAAOK,EAAKN,MAAMC,MAAMQ,KAAK,SAASzB,EAAG0B,GACvC,MAAO,GAAMC,KAAKC,WAEpBV,aAAcI,EAAKN,MAAME,aAAaY,OACpCV,GAEFf,MAAOiB,EAAKN,MAAMX,MAAQ,GAG5B,WAC2B,KAArBiB,EAAKN,MAAMX,QACbwB,MAAM,iBACNP,EAAKE,SAAS,CACZP,MAAOK,EAAKN,MAAMC,MAAMQ,KAAK,SAASzB,EAAG0B,GACvC,MAAO,GAAMC,KAAKC,WAEpBV,aAAc,GACdb,MAAO,gFASV,IAAA0B,EAAA5B,KACP,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAD,CACE3B,MAAOF,KAAKa,MAAMX,QAEpBN,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdC,KAAKa,MAAMC,MAAMiB,IAAI,SAAAjB,GAAK,OACvBlB,EAAAC,EAAAC,cAACkC,EAAD,CACEzB,WAAYqB,EAAKrB,WACjB0B,GAAInB,EAAMmB,GACVC,IAAKpB,EAAMmB,GACXxB,MAAOK,EAAML,mBAnETN,cCEEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5c9b9369.chunk.js","sourcesContent":["//sets up the reusable Navbar component\nimport React, { Component } from \"react\";\nimport \"./Navbar.css\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-default navbar-fixed-top\">\n         <ul>\n          <li className=\"itemLeft\">Test Your Memory</li>\n          <li className=\"itemCenter\"></li>\n          <li className=\"itemRight\">Score: {this.props.score}</li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./Jumbotron.css\";\n\n//pass the image into each card so all 12 are rendered\nexport function Jumbotron() {\n    return (\n        <header className = \"header\">\n\t\t<h1>The Clicky Game!</h1>\n\t\t<h2>Click on any image to earn a point, but don't click on the same picture more than once. Click all 12 pics, and you win.</h2>\n\t</header>\n    \n    );\n  }\n  export default Jumbotron;","import React from \"react\";\nimport \"./Cards.css\";\n\n//pass the image into each card so all 12 are rendered\nexport function Cards(props) {\n  return (\n    <div className=\"card\" onClick={props.imageClick}>\n      <div className=\"img-container\">\n        <img\n          alt={props.image.replace(\".png\", \"\")}\n          src={props.image}\n        />\n      </div>\n    </div>\n  );\n}\nexport default Cards;\n","//imports dependencies and files\nimport React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Cards from \"./components/Cards\";\n//import Footer from \"./components/Footer\";\nimport scape from \"./Shapes.json\";\nimport \"./App.css\";\n\n//sets state to 0 or empty\nclass App extends Component {\n  state = {\n    scape,\n    clickedScape: [],\n    score: 0\n  };\n\n//when you click on a card ... the Landscape is taken out of the array\n  imageClick = event => {\n    const currentScape = event.target.alt;\n    const scapeClickedAlready =\n      this.state.clickedScape.indexOf(currentScape) > -1;\n\n//if you click on a Landscape that has already been selected, the game is reset and cards reordered\n    if (scapeClickedAlready) {\n      this.setState({\n        scape: this.state.scape.sort(function(a, b) {\n          return 0.5 - Math.random();\n        }),\n        clickedScape: [],\n        score: 0\n      });\n        alert(\"You lose. Play again?\");\n\n//if you click on an available Landscape, your score is increased and cards reordered\n    } else {\n      this.setState(\n        {\n          scape: this.state.scape.sort(function(a, b) {\n            return 0.5 - Math.random();\n          }),\n          clickedScape: this.state.clickedScape.concat(\n            currentScape\n          ),\n          score: this.state.score + 1\n        },\n//if you get all 12 pictures corrent you get a congrats message and the game resets        \n        () => {\n          if (this.state.score === 12) {\n            alert(\"Yay! You Win!\");\n            this.setState({\n              scape: this.state.scape.sort(function(a, b) {\n                return 0.5 - Math.random();\n              }),\n              clickedScape: [],\n              score: 0\n            });\n          }\n        }\n      );\n    }\n  };\n\n//the order of components to be rendered: navbar, jumbotron, Cards, footer \n  render() {\n    return (\n      <div>\n        <Navbar \n          score={this.state.score}\n        />\n        <Jumbotron />\n        <div className=\"wrapper\">\n        {this.state.scape.map(scape => (\n            <Cards\n              imageClick={this.imageClick}\n              id={scape.id}\n              key={scape.id}\n              image={scape.image}\n            />\n          ))}\n        </div>\n        \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}